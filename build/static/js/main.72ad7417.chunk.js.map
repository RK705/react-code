{"version":3,"sources":["networkaccess/auth.js","components/login.component.js","components/signup.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","baseURL","window","URL","data","console","log","withRouter","props","history","useHistory","useState","user","setuser","pass","setpass","isloggedin","setloggedin","showdat","setshowDat","className","onChange","event","target","value","type","placeholder","onClick","preventDefault","Auth","then","res","localStorage","setItem","token","push","location","process","PORT","catch","e","SignUp","name","setname","setState","counterFunction","pager","setpager","App","settoken","useEffect","token_local","getItem","to","id","clear","exact","path","component","Login","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72ad7417.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\naxios.defaults.baseURL=window.URL\r\n\r\nconst login=(data)=>{\r\n    console.log(\"CAlling to backend Login\")\r\n    return axios.post('/auth/login',data)\r\n}\r\n\r\nconst register=(data)=>axios.post('/auth/register',data)\r\n\r\nexport default {login,register}","import React, {useState } from \"react\";\r\nimport Auth from '../networkaccess/auth'\r\nimport { useHistory,withRouter } from \"react-router-dom\";\r\n\r\nexport default withRouter((props)=>{\r\n    const history = useHistory();\r\n    console.log(props)\r\n    // const isloggedin=props.logged.isloggedin\r\n    // const setloggedin=props.logged.setisloggedin\r\n    const [user,setuser]=useState('')\r\n    const [pass,setpass]=useState('')\r\n    const [isloggedin,setloggedin]=useState(false)\r\n    const [showdat,setshowDat]=useState(null)\r\n    const onusernamechanged=(event)=>setuser(event.target.value)\r\n    const onpasschanged=(event)=>setpass(event.target.value)\r\n\r\n    const loginsetstate=(event)=>{\r\n            event.preventDefault()\r\n            Auth.login({user,pass})\r\n                .then((res)=>{\r\n                    console.log(res)\r\n                    setloggedin(true)\r\n                    setshowDat(\"LogIn SuccessFull\")\r\n                    localStorage.setItem('token',res.data.token);\r\n                    history.push('/photo')\r\n                    window.location=`http://localhost:${process.env.PORT||3333}/main/index.html`\r\n                })\r\n                .catch((e)=>{\r\n                    console.log(e)\r\n                    setshowDat(\"Wrong Username or Password\")\r\n                })\r\n    }\r\n    \r\n    return (\r\n            <form>\r\n                <h3>Sign In</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>User Name</label>\r\n                    <input onChange={onusernamechanged} type=\"text\" className=\"form-control\" placeholder=\"Enter Username\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input onChange={onpasschanged} type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\r\n                </div>\r\n\r\n                <button onClick={loginsetstate} type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\r\n                {\r\n                    isloggedin?<p>Sign in Successful</p>:<p>{showdat}</p>\r\n                } \r\n            </form>\r\n        );\r\n    \r\n})\r\n","import React,{useState} from \"react\";\r\nimport Auth from '../networkaccess/auth'\r\nconst SignUp=()=>{\r\n{       \r\n    const [user,setuser]=useState('')\r\n    const [pass,setpass]=useState('')\r\n    const [name,setname]=useState('')\r\n    const setState=(event,counterFunction)=>counterFunction(event.target.value)\r\n    const [pager,setpager]=useState(null)\r\n    const onSubmit=(e)=>{\r\n        e.preventDefault()\r\n        Auth.register({user,name,pass})\r\n            .then((res)=>{\r\n                setpager(\"Registration Successfull\")\r\n                console.log(res)\r\n            })\r\n            .catch(()=>{\r\n                setpager(\"Registration Failed\")\r\n            })\r\n    }\r\n        return (\r\n            <form>\r\n                <h3>Sign Up</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input onChange={(e)=>setState(e,setname)} type=\"text\" className=\"form-control\" placeholder=\"Name\" />\r\n                </div>\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Username</label>\r\n                    <input onChange={(e)=>setState(e,setuser)} type=\"text\" className=\"form-control\" placeholder=\"Username\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input onChange={(e)=>setState(e,setpass)} type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\r\n                </div>\r\n\r\n                <button onClick={onSubmit} type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                <p className=\"text-right\">\r\n                   {pager}\r\n                </p>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default SignUp","import React,{useState,useEffect} from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Login from \"./components/login.component\";\r\nimport SignUp from \"./components/signup.component\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const [token,settoken]=useState(null)\r\n  const signout=()=>{\r\n    localStorage.clear()\r\n    history.push(\"/sign-in\")\r\n  }\r\n\r\n  useEffect(()=>{\r\n    const token_local=localStorage.getItem('token');\r\n    settoken(token_local)\r\n    console.log(\"Token set\")\r\n  },[token])\r\n  \r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>Selfie App</Link>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                {!token?<Link className=\"nav-link\" to={\"/sign-in\"}>Login</Link>:null}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {!token?<Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>:null}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {token?<p onClick={signout}>Sign up</p>:null}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <Switch>\r\n            <Route exact path='/' component={Login} />\r\n            <Route path=\"/sign-in\" render={()=><Login token={settoken}/>} />\r\n            <Route path=\"/sign-up\" component={SignUp} />\r\n       \r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </Router>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}